{"version":3,"sources":["components/Header/header.js","sounds/slide.mp3","components/Controls/controls.js","components/MuteToggle/mutetoggle.js","sounds/startTimer.mp3","sounds/pauseTimer.mp3","components/TimerDisplay/timerdisplay.js","components/Button/button.js","components/Settings/settings.js","sounds/timesUp.mp3","App.js","reportWebVitals.js","index.js"],"names":["Header","title","Controls","timerMode","setTimerMode","setSecondsLeft","pomoLength","shortLength","longLength","setIsActive","setButtonText","volume","useSound","clickSfx","playSfx","handleModeChange","event","target","id","className","type","name","checked","onClick","onChange","htmlFor","muteToggle","setVolume","handleClick","xmlns","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","clipRule","TimerDisplay","percentage","timeLeft","isActive","buttonText","startSfx","interrupt","play","pauseSfx","interupt","pause","timeText","textSize","value","text","styles","buildStyles","pathTransitionDuration","pathColor","textColor","fontFamily","trailColor","Button","toggleVisibility","width","height","opacity","fillRule","Settings","visible","toggleSettingsVisibility","setPomoLength","setShortLength","setLongLength","fontPref","setFontPref","accentColor","setAccentColor","closeSettings","colors","default","blue","purple","fonts","kumbh","roboto","space","document","documentElement","style","onSubmit","preventDefault","pomodoro","shortBreak","longBreak","font","color","setProperty","action","min","max","defaultValue","defaultChecked","App","useState","settingsVisible","setSettingsVisible","secondsLeft","timesUpSfx","timesUp","useEffect","interval","setInterval","clearInterval","seconds","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.349bae22.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = ({ title }) => {\r\n  return(\r\n    <h1>{title}</h1>\r\n  )\r\n}\r\n\r\n\r\nexport default Header","export default __webpack_public_path__ + \"static/media/slide.3c8db537.mp3\";","import React from 'react'\r\nimport useSound from 'use-sound'\r\nimport clickSfx from '../../sounds/slide.mp3'\r\n\r\nconst Controls = ({ timerMode,\r\n                    setTimerMode,\r\n                    setSecondsLeft,\r\n                    pomoLength,\r\n                    shortLength,\r\n                    longLength,\r\n                    setIsActive,\r\n                    setButtonText,\r\n                    volume\r\n                  }) => {\r\n\r\n  const [playSfx] = useSound(clickSfx, { volume: volume });\r\n\r\n  const handleModeChange = (event) => {\r\n    setTimerMode(event.target.id)\r\n    setIsActive(false)\r\n    setButtonText('START')\r\n    switch(event.target.id) {\r\n      case 'short':\r\n        setSecondsLeft(shortLength * 60)\r\n        break\r\n      case 'long':\r\n        setSecondsLeft(longLength * 60)\r\n        break\r\n      default:\r\n        setSecondsLeft(pomoLength * 60)\r\n    }\r\n  }\r\n\r\n  return(\r\n    <form className=\"controls\">\r\n      <input  type=\"radio\" \r\n              id=\"pomo\" \r\n              name=\"mode\" \r\n              checked={timerMode === 'pomo'}\r\n              onClick={playSfx} \r\n              onChange={handleModeChange} />\r\n      <label  htmlFor=\"pomo\" className=\"controls__button\">pomodoro</label>\r\n\r\n      <input  type=\"radio\" \r\n              id=\"short\" \r\n              name=\"mode\" \r\n              checked={timerMode === 'short'}\r\n              onClick={playSfx} \r\n              onChange={handleModeChange} />\r\n      <label htmlFor=\"short\"  className=\"controls__button\">short break</label>\r\n      \r\n      <input  type=\"radio\" \r\n              id=\"long\" \r\n              name=\"mode\" \r\n              checked={timerMode === 'long'}\r\n              onClick={playSfx} \r\n              onChange={handleModeChange} />\r\n      <label htmlFor=\"long\"  className=\"controls__button\">long break</label>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Controls","import React from 'react'\r\n\r\nconst muteToggle = ( { volume, setVolume }) => {\r\n  const handleClick = (event) => {\r\n    if (volume === 0) {\r\n      setVolume(1)\r\n    }\r\n    else {\r\n      setVolume(0)\r\n    }\r\n  }\r\n\r\n  if (volume === 0) {\r\n    return(\r\n            <button className=\"display__mute\"\r\n                    id=\"muteButton\"\r\n                    title=\"mute button\"\r\n                    onClick={handleClick}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" clipRule=\"evenodd\"/><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2\"/></svg>\r\n            </button>\r\n          )\r\n  }\r\n\r\n  else {\r\n    return(\r\n      <button className=\"display__mute\"\r\n              id=\"muteButton\"\r\n              title=\"mute button\"\r\n              onClick={handleClick}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"/></svg>\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default muteToggle","export default __webpack_public_path__ + \"static/media/startTimer.2968a745.mp3\";","export default __webpack_public_path__ + \"static/media/pauseTimer.d73c4745.mp3\";","import React from 'react'\r\nimport MuteToggle from '../MuteToggle/mutetoggle'\r\nimport { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar'\r\nimport 'react-circular-progressbar/dist/styles.css'\r\nimport useSound from 'use-sound'\r\nimport startSfx from '../../sounds/startTimer.mp3'\r\nimport pauseSfx from '../../sounds/pauseTimer.mp3'\r\n\r\nconst TimerDisplay = ({ timerMode,\r\n                        percentage,\r\n                        timeLeft,\r\n                        isActive,\r\n                        setIsActive,\r\n                        buttonText,\r\n                        setButtonText,\r\n                        volume,\r\n                        setVolume\r\n                      }) => {\r\n\r\n  const [play] = useSound(startSfx, {\r\n                                      interrupt: true,\r\n                                      volume: volume,\r\n                                    })\r\n  const [pause] = useSound(pauseSfx, {\r\n                                      interupt: true,\r\n                                      volume: volume,\r\n                                    })\r\n\r\n  const handleClick = (event) => {\r\n    if (event.target.id === 'muteButton') {\r\n      return null\r\n    }\r\n    \r\n    if (timeLeft === '0:00') {\r\n      return null\r\n    }\r\n\r\n    if (isActive) {\r\n      pause()\r\n    }\r\n    else {\r\n      play()\r\n    }\r\n    setIsActive(!isActive)\r\n    setButtonText( buttonText === 'START'\r\n                    || buttonText === 'RESUME'\r\n                      ? 'PAUSE'\r\n                      : 'RESUME'\r\n                  )\r\n  }\r\n\r\n  let timesUpMsg = timerMode === 'pomo'\r\n                  ? 'time for a break'\r\n                  : 'back to work!'\r\n\r\n  let timeText = timeLeft === '0:00'\r\n                  ? timesUpMsg\r\n                  : timeLeft\r\n\r\n  let textSize = timeLeft === '0:00'\r\n                  ? '12px'\r\n                  : '28px'\r\n\r\n  return(\r\n    <div className=\"timer\" onClick={handleClick}>\r\n      <div className=\"timer__display\">\r\n        <CircularProgressbarWithChildren\r\n          value={percentage}\r\n          text={timeText}\r\n          strokeWidth={4}\r\n          styles={buildStyles({\r\n            // How long animation takes to go from one percentage to another, in seconds\r\n            pathTransitionDuration: 0.5,\r\n            // Colors & Fonts\r\n            pathColor: 'var(--accent-color)',\r\n            textColor: 'var(--text)',\r\n            textSize: textSize,\r\n            fontFamily: 'var(--font-current)',\r\n            trailColor: 'none',\r\n          })}>\r\n          \r\n          <MuteToggle volume = {volume}\r\n                      setVolume = {setVolume} />\r\n          <button className=\"display__start-pause\" onClick={handleClick}>{buttonText}</button>\r\n        </CircularProgressbarWithChildren>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimerDisplay","import React from 'react'\r\n\r\nconst Button = ({ type, buttonText = '', toggleVisibility }) => {\r\n  if(type === 'settings') {\r\n    return(\r\n      <button className=\"pomodoro-app__preferences\" name=\"settings\" title=\"show preferences pane\" onClick={toggleVisibility}>\r\n        <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g opacity=\"0.5\">\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M24.0378 15.365L26.9654 17.682C27.229 17.899 27.3054 18.2771 27.1318 18.578L24.3568 23.429C24.1834 23.73 23.8226 23.849 23.5104 23.73L20.0555 22.323C19.341 22.883 18.557 23.345 17.7106 23.702L17.1903 27.412C17.1348 27.741 16.8504 28 16.5035 28H10.9535C10.6066 28 10.3221 27.741 10.2666 27.412L9.74633 23.702C8.89997 23.345 8.11604 22.8761 7.40145 22.323L3.94654 23.73C3.63435 23.856 3.27364 23.73 3.10018 23.429L0.325132 18.578C0.151671 18.27 0.228028 17.892 0.491634 17.682L3.41927 15.365C3.36379 14.917 3.32216 14.462 3.32216 14C3.32216 13.538 3.36379 13.083 3.41927 12.635L0.491634 10.318C0.228028 10.101 0.151671 9.72302 0.325132 9.42199L3.10025 4.57099C3.27364 4.26996 3.63442 4.15098 3.94661 4.26996L7.40152 5.67697C8.11604 5.11699 8.90003 4.65499 9.74639 4.29799L10.2667 0.588001C10.3222 0.259022 10.6067 0 10.9535 0H16.5036C16.8504 0 17.1348 0.259022 17.1973 0.588001L17.7177 4.29799C18.564 4.65499 19.3479 5.12394 20.0625 5.67697L23.5174 4.26996C23.8296 4.14396 24.1903 4.26996 24.3638 4.57099L27.1389 9.42199C27.3123 9.72997 27.236 10.108 26.9724 10.318L24.0378 12.635C24.0932 13.083 24.1349 13.538 24.1349 14C24.1349 14.462 24.0932 14.917 24.0378 15.365ZM8.8722 14C8.8722 16.709 11.0437 18.9 13.7285 18.9C16.4134 18.9 18.5848 16.7091 18.5848 14.0001C18.5848 11.2911 16.4134 9.10004 13.7285 9.10004C11.0437 9.10004 8.8722 11.291 8.8722 14Z\" fill=\"#D7E0FF\"/>\r\n          </g>\r\n        </svg>\r\n      </button>\r\n    )\r\n  }\r\n\r\n  if(type === 'close') {\r\n    return(<button className=\"pane__close-preferences\" onClick={toggleVisibility}>{buttonText}</button>)\r\n  }\r\n\r\n  if(type === 'apply') {\r\n    return(\r\n      <div className=\"pane__apply-row\">\r\n        <input type=\"submit\" value={buttonText} className=\"pane__apply-preferences\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  else{\r\n    return(null)\r\n  }\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport Button from '../Button/button'\r\n\r\nconst Settings = ({ visible,\r\n                    toggleSettingsVisibility,\r\n                    pomoLength,\r\n                    setPomoLength,\r\n                    shortLength,\r\n                    setShortLength,\r\n                    longLength,\r\n                    setLongLength,\r\n                    fontPref,\r\n                    setFontPref,\r\n                    accentColor,\r\n                    setAccentColor,\r\n                    closeSettings,\r\n                    setSecondsLeft,\r\n                    timerMode,\r\n                  }) => {\r\n\r\n  const colors = {\r\n    default: '#F87070',\r\n    blue:   '#70F3F8',\r\n    purple: '#D881F8',\r\n  }\r\n\r\n  const fonts = {\r\n    kumbh: `'Kumbh Sans', sans-serif`,\r\n    roboto: `'Roboto Slab', serif`,\r\n    space: `'Space Mono', monospace`,\r\n  }\r\n\r\n  const styles = document.documentElement.style\r\n\r\n  const applySettings = (event) => {\r\n    event.preventDefault()\r\n\r\n    setPomoLength(event.target.pomodoro.value)\r\n    setShortLength(event.target.shortBreak.value)\r\n    setLongLength(event.target.longBreak.value)\r\n    setFontPref(event.target.font.value)\r\n    setAccentColor(event.target.color.value)\r\n    closeSettings()\r\n\r\n    styles.setProperty(\"--font-current\", fonts[event.target.font.value])\r\n    styles.setProperty(\"--accent-color\", colors[event.target.color.value])\r\n\r\n    switch(timerMode) {\r\n      case 'short':\r\n        setSecondsLeft(event.target.shortBreak.value * 60)\r\n        break\r\n      case 'long':\r\n        setSecondsLeft(event.target.longBreak.value * 60)\r\n        break\r\n      default:\r\n        setSecondsLeft(event.target.pomodoro.value * 60)\r\n    }\r\n  }\r\n\r\n  if (visible) {\r\n    return (\r\n      <div className=\"preferences preferences--visible\">\r\n      <div className=\"preferences__pane\">\r\n        <Button type=\"close\" buttonText=\"×\" toggleVisibility={toggleSettingsVisibility} />\r\n        <h2>Settings</h2>\r\n        <form onSubmit={applySettings}>\r\n          <div className=\"pane__time-settings\">\r\n            <h3>Time (Minutes)</h3>\r\n            <div action=\"\" className=\"time-settings__form\">\r\n              <label htmlFor=\"pomodoro\">pomodoro</label>\r\n              <input type=\"number\" name=\"pomodoro\" id=\"pomodoro\" min=\"5\" max=\"90\" defaultValue={pomoLength} />\r\n              <label htmlFor=\"short-break\">short break</label>\r\n              <input type=\"number\" name=\"shortBreak\" id=\"short-break\" min=\"1\" max=\"14\" defaultValue={shortLength} />\r\n              <label htmlFor=\"long-break\">long break</label>\r\n              <input type=\"number\" name=\"longBreak\" id=\"long-break\" min=\"15\" max=\"30\" defaultValue={longLength} />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"pane__font-preference\">\r\n            <h3>Font</h3>\r\n            <input type=\"radio\" id=\"fontPref1\" name=\"font\" value=\"kumbh\" defaultChecked={fontPref === 'kumbh'} />\r\n            <label htmlFor=\"fontPref1\" className=\"font-preference__kumbh\">Aa</label>\r\n            <input type=\"radio\" id=\"fontPref2\" name=\"font\" value=\"roboto\" defaultChecked={fontPref === 'roboto'} />\r\n            <label htmlFor=\"fontPref2\" className=\"font-preference__roboto\">Aa</label>\r\n            <input type=\"radio\" id=\"fontPref3\" name=\"font\" value=\"space\" defaultChecked={fontPref === 'space'} />\r\n            <label htmlFor=\"fontPref3\" className=\"font-preference__space\">Aa</label>\r\n          </div>\r\n\r\n          <div className=\"pane__color-preference\">\r\n            <h3>Color</h3>\r\n            <input type=\"radio\" id=\"colorPref1\" name=\"color\" value=\"default\" defaultChecked={accentColor === 'default'} />\r\n            <label htmlFor=\"colorPref1\" className=\"color-preference__default\"></label>\r\n\r\n            <input type=\"radio\" id=\"colorPref2\" name=\"color\" value=\"blue\" defaultChecked={accentColor === 'blue'} />\r\n            <label htmlFor=\"colorPref2\" className=\"color-preference__blue\"></label>\r\n            \r\n            <input type=\"radio\" id=\"colorPref3\" name=\"color\" value=\"purple\" defaultChecked={accentColor === 'purple'} />\r\n            <label htmlFor=\"colorPref3\" className=\"color-preference__purple\"></label>\r\n          </div>\r\n          <Button type=\"apply\" buttonText=\"Apply\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n  \r\n  return(null)\r\n}\r\n\r\nexport default Settings","export default __webpack_public_path__ + \"static/media/timesUp.0cbb5adf.mp3\";","import './App.css';\r\nimport Header from './components/Header/header'\r\nimport Controls from './components/Controls/controls'\r\nimport TimerDisplay from './components/TimerDisplay/timerdisplay'\r\nimport Button from './components/Button/button'\r\nimport Settings from './components/Settings/settings'\r\nimport { useState, useEffect } from 'react';\r\nimport useSound from 'use-sound'\r\nimport timesUpSfx from './sounds/timesUp.mp3'\r\n\r\n\r\nfunction App() {\r\n  const [ settingsVisible, setSettingsVisible ] = useState(false)\r\n  const [ timerMode, setTimerMode ] = useState('pomo')   // options: pomo, short, long\r\n  const [ pomoLength, setPomoLength ] = useState(25)\r\n  const [ shortLength, setShortLength ] = useState(3)\r\n  const [ longLength, setLongLength ] = useState(15)\r\n  const [ fontPref, setFontPref ] = useState('kumbh')         // options: kumbh, roboto, space\r\n  const [ accentColor, setAccentColor ] = useState('default') // options: default, blue, purple\r\n  const [ secondsLeft, setSecondsLeft] = useState(pomoLength * 60)\r\n  const [ isActive, setIsActive ] = useState(false)\r\n  const [ buttonText, setButtonText ] = useState('START')\r\n\r\n  const [ volume, setVolume ] = useState(1)\r\n  const [ timesUp ] = useSound(timesUpSfx, {\r\n                                volume: volume,\r\n                              })\r\n\r\n  useEffect(() => {\r\n    if(isActive) {\r\n      const interval = setInterval(() => {\r\n        setSecondsLeft(secondsLeft => secondsLeft - 1)\r\n      }, 1000)\r\n    \r\n      if(secondsLeft === 0) {\r\n        clearInterval(interval)\r\n        setIsActive(false)\r\n        setButtonText('')\r\n        timesUp()\r\n      }\r\n\r\n      return () => clearInterval(interval)\r\n    }\r\n    \r\n  }, [isActive, secondsLeft, timesUp]);\r\n\r\n\r\n  const toggleSettingsVisibility = (event) => {\r\n    setSettingsVisible(!settingsVisible)\r\n  }\r\n\r\n  const formatTimeLeft = (seconds) => {\r\n    return(`${Math.floor(seconds / 60)}:${\r\n            (seconds % 60 > 9)\r\n              ? seconds % 60\r\n              : '0' + seconds % 60\r\n          }`)\r\n  }\r\n\r\n  const calcPercentage = () => {\r\n    if(timerMode === 'pomo') {\r\n      return((secondsLeft / (pomoLength * 60)) * 100)\r\n    }\r\n    if(timerMode === 'short') {\r\n      return((secondsLeft / (shortLength * 60)) * 100)\r\n    }\r\n    if(timerMode === 'long') {\r\n      return((secondsLeft / (longLength * 60)) * 100)\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"pomodoro-app\">\r\n      <Header title=\"pomodoro\" />\r\n      <Controls\r\n        timerMode={timerMode}\r\n        setTimerMode={setTimerMode}\r\n        setSecondsLeft={setSecondsLeft}\r\n        pomoLength={pomoLength}\r\n        shortLength={shortLength}\r\n        longLength={longLength}\r\n        setIsActive={setIsActive}\r\n        buttonText={buttonText}\r\n        setButtonText={setButtonText}\r\n        volume={volume}\r\n        />\r\n      <TimerDisplay\r\n        timerMode={timerMode}\r\n        percentage={calcPercentage()}\r\n        timeLeft={formatTimeLeft(secondsLeft)}\r\n        isActive={isActive}\r\n        setIsActive={setIsActive}\r\n        buttonText={buttonText}\r\n        setButtonText={setButtonText}\r\n        volume={volume}\r\n        setVolume={setVolume}\r\n        />\r\n      <Button type=\"settings\" toggleVisibility={toggleSettingsVisibility} />\r\n      <Settings visible={settingsVisible}\r\n                toggleSettingsVisibility={toggleSettingsVisibility} \r\n                pomoLength={pomoLength}\r\n                setPomoLength={setPomoLength}\r\n                shortLength={shortLength}\r\n                setShortLength={setShortLength}\r\n                longLength={longLength}\r\n                setLongLength={setLongLength}\r\n                fontPref={fontPref}\r\n                setFontPref={setFontPref}\r\n                accentColor={accentColor}\r\n                setAccentColor={setAccentColor}\r\n                closeSettings={toggleSettingsVisibility}\r\n                setSecondsLeft={setSecondsLeft}\r\n                timerMode={timerMode}\r\n                />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}